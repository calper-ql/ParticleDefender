// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: particles.proto

#ifndef PROTOBUF_particles_2eproto__INCLUDED
#define PROTOBUF_particles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_particles_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsProtoVectorImpl();
void InitDefaultsProtoVector();
void InitDefaultsProtoParticleImpl();
void InitDefaultsProtoParticle();
void InitDefaultsProtoAcknowledgeImpl();
void InitDefaultsProtoAcknowledge();
void InitDefaultsProtoParticleSetImpl();
void InitDefaultsProtoParticleSet();
inline void InitDefaults() {
  InitDefaultsProtoVector();
  InitDefaultsProtoParticle();
  InitDefaultsProtoAcknowledge();
  InitDefaultsProtoParticleSet();
}
}  // namespace protobuf_particles_2eproto
class ProtoAcknowledge;
class ProtoAcknowledgeDefaultTypeInternal;
extern ProtoAcknowledgeDefaultTypeInternal _ProtoAcknowledge_default_instance_;
class ProtoParticle;
class ProtoParticleDefaultTypeInternal;
extern ProtoParticleDefaultTypeInternal _ProtoParticle_default_instance_;
class ProtoParticleSet;
class ProtoParticleSetDefaultTypeInternal;
extern ProtoParticleSetDefaultTypeInternal _ProtoParticleSet_default_instance_;
class ProtoVector;
class ProtoVectorDefaultTypeInternal;
extern ProtoVectorDefaultTypeInternal _ProtoVector_default_instance_;

enum ProtoAcknowledge_ACK {
  ProtoAcknowledge_ACK_NONE = 0,
  ProtoAcknowledge_ACK_CONTINUE = 1,
  ProtoAcknowledge_ACK_STOP = 2,
  ProtoAcknowledge_ACK_ProtoAcknowledge_ACK_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoAcknowledge_ACK_ProtoAcknowledge_ACK_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoAcknowledge_ACK_IsValid(int value);
const ProtoAcknowledge_ACK ProtoAcknowledge_ACK_ACK_MIN = ProtoAcknowledge_ACK_NONE;
const ProtoAcknowledge_ACK ProtoAcknowledge_ACK_ACK_MAX = ProtoAcknowledge_ACK_STOP;
const int ProtoAcknowledge_ACK_ACK_ARRAYSIZE = ProtoAcknowledge_ACK_ACK_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoAcknowledge_ACK_descriptor();
inline const ::std::string& ProtoAcknowledge_ACK_Name(ProtoAcknowledge_ACK value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoAcknowledge_ACK_descriptor(), value);
}
inline bool ProtoAcknowledge_ACK_Parse(
    const ::std::string& name, ProtoAcknowledge_ACK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoAcknowledge_ACK>(
    ProtoAcknowledge_ACK_descriptor(), name, value);
}
// ===================================================================

class ProtoVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoVector) */ {
 public:
  ProtoVector();
  virtual ~ProtoVector();

  ProtoVector(const ProtoVector& from);

  inline ProtoVector& operator=(const ProtoVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoVector(ProtoVector&& from) noexcept
    : ProtoVector() {
    *this = ::std::move(from);
  }

  inline ProtoVector& operator=(ProtoVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoVector* internal_default_instance() {
    return reinterpret_cast<const ProtoVector*>(
               &_ProtoVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProtoVector* other);
  friend void swap(ProtoVector& a, ProtoVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoVector* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoVector& from);
  void MergeFrom(const ProtoVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:ProtoVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_particles_2eproto::TableStruct;
  friend void ::protobuf_particles_2eproto::InitDefaultsProtoVectorImpl();
};
// -------------------------------------------------------------------

class ProtoParticle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoParticle) */ {
 public:
  ProtoParticle();
  virtual ~ProtoParticle();

  ProtoParticle(const ProtoParticle& from);

  inline ProtoParticle& operator=(const ProtoParticle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoParticle(ProtoParticle&& from) noexcept
    : ProtoParticle() {
    *this = ::std::move(from);
  }

  inline ProtoParticle& operator=(ProtoParticle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoParticle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoParticle* internal_default_instance() {
    return reinterpret_cast<const ProtoParticle*>(
               &_ProtoParticle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ProtoParticle* other);
  friend void swap(ProtoParticle& a, ProtoParticle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoParticle* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoParticle& from);
  void MergeFrom(const ProtoParticle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoParticle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ProtoVector position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::ProtoVector& position() const;
  ::ProtoVector* release_position();
  ::ProtoVector* mutable_position();
  void set_allocated_position(::ProtoVector* position);

  // .ProtoVector velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  const ::ProtoVector& velocity() const;
  ::ProtoVector* release_velocity();
  ::ProtoVector* mutable_velocity();
  void set_allocated_velocity(::ProtoVector* velocity);

  // @@protoc_insertion_point(class_scope:ProtoParticle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ProtoVector* position_;
  ::ProtoVector* velocity_;
  mutable int _cached_size_;
  friend struct ::protobuf_particles_2eproto::TableStruct;
  friend void ::protobuf_particles_2eproto::InitDefaultsProtoParticleImpl();
};
// -------------------------------------------------------------------

class ProtoAcknowledge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoAcknowledge) */ {
 public:
  ProtoAcknowledge();
  virtual ~ProtoAcknowledge();

  ProtoAcknowledge(const ProtoAcknowledge& from);

  inline ProtoAcknowledge& operator=(const ProtoAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoAcknowledge(ProtoAcknowledge&& from) noexcept
    : ProtoAcknowledge() {
    *this = ::std::move(from);
  }

  inline ProtoAcknowledge& operator=(ProtoAcknowledge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoAcknowledge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoAcknowledge* internal_default_instance() {
    return reinterpret_cast<const ProtoAcknowledge*>(
               &_ProtoAcknowledge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ProtoAcknowledge* other);
  friend void swap(ProtoAcknowledge& a, ProtoAcknowledge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoAcknowledge* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoAcknowledge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoAcknowledge& from);
  void MergeFrom(const ProtoAcknowledge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoAcknowledge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProtoAcknowledge_ACK ACK;
  static const ACK NONE =
    ProtoAcknowledge_ACK_NONE;
  static const ACK CONTINUE =
    ProtoAcknowledge_ACK_CONTINUE;
  static const ACK STOP =
    ProtoAcknowledge_ACK_STOP;
  static inline bool ACK_IsValid(int value) {
    return ProtoAcknowledge_ACK_IsValid(value);
  }
  static const ACK ACK_MIN =
    ProtoAcknowledge_ACK_ACK_MIN;
  static const ACK ACK_MAX =
    ProtoAcknowledge_ACK_ACK_MAX;
  static const int ACK_ARRAYSIZE =
    ProtoAcknowledge_ACK_ACK_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ACK_descriptor() {
    return ProtoAcknowledge_ACK_descriptor();
  }
  static inline const ::std::string& ACK_Name(ACK value) {
    return ProtoAcknowledge_ACK_Name(value);
  }
  static inline bool ACK_Parse(const ::std::string& name,
      ACK* value) {
    return ProtoAcknowledge_ACK_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ProtoAcknowledge.ACK state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::ProtoAcknowledge_ACK state() const;
  void set_state(::ProtoAcknowledge_ACK value);

  // @@protoc_insertion_point(class_scope:ProtoAcknowledge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_particles_2eproto::TableStruct;
  friend void ::protobuf_particles_2eproto::InitDefaultsProtoAcknowledgeImpl();
};
// -------------------------------------------------------------------

class ProtoParticleSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoParticleSet) */ {
 public:
  ProtoParticleSet();
  virtual ~ProtoParticleSet();

  ProtoParticleSet(const ProtoParticleSet& from);

  inline ProtoParticleSet& operator=(const ProtoParticleSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoParticleSet(ProtoParticleSet&& from) noexcept
    : ProtoParticleSet() {
    *this = ::std::move(from);
  }

  inline ProtoParticleSet& operator=(ProtoParticleSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoParticleSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoParticleSet* internal_default_instance() {
    return reinterpret_cast<const ProtoParticleSet*>(
               &_ProtoParticleSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ProtoParticleSet* other);
  friend void swap(ProtoParticleSet& a, ProtoParticleSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoParticleSet* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoParticleSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoParticleSet& from);
  void MergeFrom(const ProtoParticleSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoParticleSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoParticle particles = 1;
  int particles_size() const;
  void clear_particles();
  static const int kParticlesFieldNumber = 1;
  const ::ProtoParticle& particles(int index) const;
  ::ProtoParticle* mutable_particles(int index);
  ::ProtoParticle* add_particles();
  ::google::protobuf::RepeatedPtrField< ::ProtoParticle >*
      mutable_particles();
  const ::google::protobuf::RepeatedPtrField< ::ProtoParticle >&
      particles() const;

  // @@protoc_insertion_point(class_scope:ProtoParticleSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ProtoParticle > particles_;
  mutable int _cached_size_;
  friend struct ::protobuf_particles_2eproto::TableStruct;
  friend void ::protobuf_particles_2eproto::InitDefaultsProtoParticleSetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoVector

// float x = 1;
inline void ProtoVector::clear_x() {
  x_ = 0;
}
inline float ProtoVector::x() const {
  // @@protoc_insertion_point(field_get:ProtoVector.x)
  return x_;
}
inline void ProtoVector::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoVector.x)
}

// float y = 2;
inline void ProtoVector::clear_y() {
  y_ = 0;
}
inline float ProtoVector::y() const {
  // @@protoc_insertion_point(field_get:ProtoVector.y)
  return y_;
}
inline void ProtoVector::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoVector.y)
}

// float z = 3;
inline void ProtoVector::clear_z() {
  z_ = 0;
}
inline float ProtoVector::z() const {
  // @@protoc_insertion_point(field_get:ProtoVector.z)
  return z_;
}
inline void ProtoVector::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ProtoVector.z)
}

// -------------------------------------------------------------------

// ProtoParticle

// .ProtoVector position = 1;
inline bool ProtoParticle::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void ProtoParticle::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::ProtoVector& ProtoParticle::position() const {
  const ::ProtoVector* p = position_;
  // @@protoc_insertion_point(field_get:ProtoParticle.position)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtoVector*>(
      &::_ProtoVector_default_instance_);
}
inline ::ProtoVector* ProtoParticle::release_position() {
  // @@protoc_insertion_point(field_release:ProtoParticle.position)
  
  ::ProtoVector* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::ProtoVector* ProtoParticle::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::ProtoVector;
  }
  // @@protoc_insertion_point(field_mutable:ProtoParticle.position)
  return position_;
}
inline void ProtoParticle::set_allocated_position(::ProtoVector* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ProtoParticle.position)
}

// .ProtoVector velocity = 2;
inline bool ProtoParticle::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline void ProtoParticle::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
inline const ::ProtoVector& ProtoParticle::velocity() const {
  const ::ProtoVector* p = velocity_;
  // @@protoc_insertion_point(field_get:ProtoParticle.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtoVector*>(
      &::_ProtoVector_default_instance_);
}
inline ::ProtoVector* ProtoParticle::release_velocity() {
  // @@protoc_insertion_point(field_release:ProtoParticle.velocity)
  
  ::ProtoVector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::ProtoVector* ProtoParticle::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::ProtoVector;
  }
  // @@protoc_insertion_point(field_mutable:ProtoParticle.velocity)
  return velocity_;
}
inline void ProtoParticle::set_allocated_velocity(::ProtoVector* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete velocity_;
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:ProtoParticle.velocity)
}

// -------------------------------------------------------------------

// ProtoAcknowledge

// .ProtoAcknowledge.ACK state = 1;
inline void ProtoAcknowledge::clear_state() {
  state_ = 0;
}
inline ::ProtoAcknowledge_ACK ProtoAcknowledge::state() const {
  // @@protoc_insertion_point(field_get:ProtoAcknowledge.state)
  return static_cast< ::ProtoAcknowledge_ACK >(state_);
}
inline void ProtoAcknowledge::set_state(::ProtoAcknowledge_ACK value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ProtoAcknowledge.state)
}

// -------------------------------------------------------------------

// ProtoParticleSet

// repeated .ProtoParticle particles = 1;
inline int ProtoParticleSet::particles_size() const {
  return particles_.size();
}
inline void ProtoParticleSet::clear_particles() {
  particles_.Clear();
}
inline const ::ProtoParticle& ProtoParticleSet::particles(int index) const {
  // @@protoc_insertion_point(field_get:ProtoParticleSet.particles)
  return particles_.Get(index);
}
inline ::ProtoParticle* ProtoParticleSet::mutable_particles(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoParticleSet.particles)
  return particles_.Mutable(index);
}
inline ::ProtoParticle* ProtoParticleSet::add_particles() {
  // @@protoc_insertion_point(field_add:ProtoParticleSet.particles)
  return particles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoParticle >*
ProtoParticleSet::mutable_particles() {
  // @@protoc_insertion_point(field_mutable_list:ProtoParticleSet.particles)
  return &particles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoParticle >&
ProtoParticleSet::particles() const {
  // @@protoc_insertion_point(field_list:ProtoParticleSet.particles)
  return particles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ProtoAcknowledge_ACK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoAcknowledge_ACK>() {
  return ::ProtoAcknowledge_ACK_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_particles_2eproto__INCLUDED
